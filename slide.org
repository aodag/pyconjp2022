#+TITLE: setuptoolsの最近
#+SUBTITLE: PyCon JP 2022
#+AUTHOR: Atsushi Odagiri
#+DATE: 2022-10-14
#+BEAMER_THEME: Madrid
#+BEAMER_COLOR_THEME: beetle
#+OPTIONS: H:2 toc:t num:t
#+OPTIONS: ^:{}
#+LaTeX_CLASS: beamer
#+LaTeX_HEADER: \usepackage{luatexja}
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col)

* はじめに

** お前誰よ
***  
:PROPERTIES:
:BEAEMER_COL: 0.48
:BEAMER_ENV: block
:END:
   - Atsushi Odagiri
   - Open Collector
   - Pythonは1.5くらいのころから

*** 
:PROPERTIES:
:BEAEMER_COL: 0.48
:BEAMER_ENV: block
:END:

#+ATTR_LATEX: :width 2cm
[[./r-penta512.png]]

#+ATTR_LATEX: :width 2cm
[[./oc-logo.png]]
#+ATTR_LATEX: :width 2cm
[[./logo-w.png]]

* 今日のsetuptools
** setuptoolsと私
- 2013 1.1.5
  - パッケージングの今と未来
- 2014 6.0
  - パッケージングの今 2014 6.0
- 2015 18.3
  - Packaging最前線
- 2016 27.3.0
  - パッケージングを支える技術
- 2017 36.4.0
  - Pythonとパッケージングと私
- 2018 40.2.0
  - あなたとPython 今すぐパッケージング
- 2019 41.2.0
  - LT 今日のsetuptools
- 2021 53.0.0
  - charity talk パッケージングの呼び声

** 今日のsetuptools
- 2022 65.4.1
  - *NEW!* setuptoolsの最近


* setuptoolsとは？
** setuptoolsとは？
  - ~distutils~ を拡張するもの
  - 所謂 ~setup.py~ を作成するために使う(使われた)

** setuptoolsの最近
  - 近代化：パッケージング関連PEPへの追従
  - distutilsが標準ライブラリから消える予定
  - いろいろ剥ぎ取られて純粋なパッケージ作成ツールになってきている
* Good-bye distutils!
** distutilsの行く末
  - PEP 632 – Deprecate distutils module
  - 3.12で削除(多分)
    - https://github.com/python/cpython/tree/main/Lib/distutils
    - まだある...
** distutilsはどこにある？
  - 標準ライブラリ
  - setuptoolsの中 (~setuptools/_distutils~)
  - ~SETUPTOOLS_USE_DISTUTILS~
    - ~"stdlib"~ 標準ライブラリにあるdistutilsを使う
    - ~"local"~ setuptools内部で持っているdistutilsを使う
  - ~distutils-precedence.pth~ の中で切り替え

** pthファイル
 - ~site-packages~ に置いてある ~*.pth~
 - ~./~ などで始まる行は ~sys.path~ に追加
 - それ以外の行はpythonコードとして *実行される*
   - *回避不能*
   - python2のころは ~-S~ オプションで回避できてたかも

#+begin_example
-S
Disable the import of the module site and the site-dependent manipulations of sys.path that it entails.
#+end_example

** Good bye setup.py?

- ~setup.py~ お前、消えるのか？

* setuptoolsの近代化
** setuptoolsの近代化

- PEPへの追従
- setupが持っていた機能は別のツールへ
- 純粋にパッケージ作成のツール

** PEPへの追従
  - PEP 517
    - ~setup.py~ が不要に！(でもeditableするときは必要)
  - PEP 621
    - ~setup.cfg~ が不要に！(でもeditableするときは必要)
  - PEP 660
    - ~pyproject.toml~ だけでeditable可能に！

** setup.py の役割
- パッケージメタデータを書く
- パッケージングする

** setup.pyでパッケージングする
#+begin_example
$ python setup.py sdist bdist_wheel
$ python setup.py upload
#+end_example
** setup.cfgにメタデータを書く
- ~setup~ 関数の引数として書いていたが ~setup.cfg~ にも書ける
- ~setup.py~ の中身は引数なしの ~setup()~ だけに
** PEP517
- sdistからwheelを作る方法の定義
- パッケージングツールはwheel作成のAPIを提供する
- パッケージング設定は ~pyproject.toml~ に書く
  - 設定ファイル増えたよ！？

#+begin_src toml
  [build-system]
  requires = ["setuptools"]
  build-backend = "setuptools.build_meta"
#+end_src

** PEP621
- ~pyproject.toml~ にメタデータを書くためのスキーマ定義
- v61.0.0 (24 Mar 2022) で導入

  
** パッケージメタデータ（オールドスタイル）
- ~setup.py~
#+begin_src python
  setup(
      name="very-useful-tool",
      version="0.1",
      author="Atsushi Odagiri",
      ...
      install_requires=[
          "pyramid",
      ],
      tests_require=[
          "pytest",
      ],
      ...
  )
#+end_src
** パッケージメタデータ（セミオールドスタイル）
- ~setup.cfg~
#+begin_src conf
  [metadata]
  name = very-useful-tool
  version = 0.1
  author Atsushi Odagiri
  ...

  [options]
  install_requires =
    pyramid
  tests_require =
    pytest
#+end_src
** パッケージメタデータ（PEP621）
- ~pyproject.toml~
#+begin_src toml
  [project]
  name="very-useful-tool"
  version="0.1"
  author="Atsushi Odagiri"
  dependencies =
    ["pyramid"]

  [project.optional-dependencies]
  tests = ["pytest"]


#+end_src
** setup.pyは不要になるか
- PEP 517 対応
  - ~setup.py~ なしでもパッケージング作業は可能
- PEP 621 対応
  - メタデータの記述が ~setup.cfg~ から ~pyproject.toml~ に移動
  - editableインストールするときはまだ必要
  - 空の ~setup.cfg~ を作るはめに...
- PEP 660 でeditableインストールのためのAPIが提案された
  - poetryやflitは対応済
  - setuptoolsは作業中

* setuptoolsが失ったもの
** setuptoolsが失ったもの

- パッケージインストーラー(~easy_install~)
- パッケージのマルチバージョニング(~eggディレクトリ~)
- ディストリビューションフォーマット(~eggフォーマット~)
- パッケージメタデータの拡張(~egg_info~)
- パッケージ関連のライブラリ(~pkg_resources~)
- PyPIへのアップロード(~setup.py upload~)

** インストーラーはeasy_installからpipへ
  - PEP 453 – Explicit bootstrapping of pip in Python installations
    - pythonインストールと同時にpipもインストールされるようになった
  - easy_installとpip
    - PyPIからダウンロードしてインストール
    - 対象ライブラリが依存するライブラリもインストールする
  - ~easy_install~ の弱点
    - atomic性の欠如
      - 複数パッケージインストール中にエラーが発生すると中途半端な状態に
  - ~egg~ ディレクトリへのインストール
** インストール先はeggディレクトリからvenvへ
  - PEP 405 – Python Virtual Environments
  - ~site-packages~ 以下にディストリビューションごとのディレクトリ( = eggディレクトリ)を作成してその下に展開
    - 例えば ~site-packages/pyramid-1.4-egg/pyramid/~
  - pthファイルを使って ~sys.path~ に追加
  - ~egg~ zip safe
    - eggディレクトリと同じ構造でzip化した状態
    - zip_safe=True ならeggファイルのままsite-packagesにコピー
** eggディレクトリでmulti versioningしてたのに！
 - ~easy_install -m~ でmulti versioning対象に
   - pthファイルから対象のeggディレクトリを削除
   - このままではsys.pathに追加されなくなる
 - ~setuptools.Require~ で特定バージョンを有効化
 - ~venv~ で分離すればいいよね
** バイナリディストリビューションはeggからwheelへ
  - PEP 427 – The Wheel Binary Package Format 1.0
  - PEP 491 – The Wheel Binary Package Format 1.9
  - PEP 425 – Compatibility Tags for Built Distributions
  - PEP 513 – A Platform Tag for Portable Linux Built Distributions
  - PEP 571 – The manylinux2010 Platform Tag
  - PEP 599 – The manylinux2014 Platform Tag
  - PEP 600 – Future ‘manylinux’ Platform Tags for Portable Linux Built Distributions
  - wheel/egg2wheel
** egg_infoからdist_infoに！
  - PEP 241 – Metadata for Python Software Packages
  - PEP 314 – Metadata for Python Software Packages v1.1
  - PEP 345 – Metadata for Python Software Packages 1.2
  - PEP 566 – Metadata for Python Software Packages 2.1
    - description-content-type
  - PEP 643 – Metadata for Package Source Distributions
  - 2.3
  - PEP 685 – Comparison of extra names for optional distribution dependencies
  - PEP 508 – Dependency specification for Python Software Packages
  - PEP 386 – Changing the version comparison module in Distutils
  - PEP 376 – Database of Installed Python Distributions
** pkg_resourcesとその後継
  * distlib
  * packaging
  * pkg_resourcesの機能が標準ライブラリへ
    * importlib.metadata
    * importlib.resource
** インストールされているパッケージ一覧を表示する(freeze)例
*** pkg_resourcesの例
#+begin_src python
  import site
  import pkg_resources
  pkg_resources.find_distributions(
      site.getsitepackages()[0])
#+end_src
*** distlibの例
#+begin_src python
  from distlib.database import DistributionPath
  dist_path = DistributionPath()
  [d.name for d in dist_path.get_distributions()]
#+end_src
*** importlib.metadataの例
#+begin_src python
  from importlib import metadata
  [d.name for d in metadata.distributions()]
#+end_src
** PyPIへのアップロードフロー

- wheel作成は ~build~ を使う
- PyPIへのアップロードは ~twine~ を使う
#+begin_example
$ python setup.py register sdist upload
#+end_example  
#+begin_example
$ python -m build .
$ python -m twine upload dist/*.whl
#+end_example
* おわり
** まとめ
- distutilsが標準ライブラリから消えるのでsetuptoolsに同梱
  - ハックがひどい
- setuptoolsの近代化
  - PEP 517
    - ~setup.py~ が不要に！(でもeditableするときは必要)
  - PEP 621
    - ~setup.cfg~ が不要に！(でもeditableするときは必要)
  - PEP 660
    - ~pyproject.toml~ だけでeditable可能に！
- setuptoolsが失ってきたもの
  - インストーラー
  - egg
  - pkg_resources
  - などなど
** 参考(1)
- PEPs https://peps.python.org/topic/packaging/
  - PEP 405 – Python Virtual Environments
  - PEP 420 – Implicit Namespace Packages
  - PEP 425 – Compatibility Tags for Built Distributions
  - PEP 440 – Version Identification and Dependency Specification
  - PEP 453 – Explicit bootstrapping of pip in Python installations
  - PEP 491 – The Wheel Binary Package Format 1.9
  - PEP 513 – A Platform Tag for Portable Linux Built Distributions
  - PEP 517 – A build-system independent format for source trees
  - PEP 571 – The manylinux2010 Platform Tag
** 参考(2)
- PEPs
  - PEP 599 – The manylinux2014 Platform Tag
  - PEP 600 – Future ‘manylinux’ Platform Tags for Portable Linux Built Distributions
  - PEP 621 – Storing project metadata in pyproject.toml
  - PEP 632 – Deprecate distutils module
  - PEP 660 – Editable installs for pyproject.toml based builds (wheel based)
- The Python Standard Library
 - [[https://docs.python.org/3/library/pkgutil.html][pkgutil]]
 - [[https://docs.python.org/3/library/importlib.html][importlib]]
 - [[https://docs.python.org/3/library/importlib.metadata.html][importlib.metadata]]
- setuptools documentation, https://setuptools.pypa.io/en/latest/
- Python Packaging User Guide, https://packaging.python.org/en/latest/
- setuptools - The Peak Developer's Center, http://peak.telecommunity.com/DevCenter/setuptools
